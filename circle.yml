version: 2.1

executors:
  builder_frontend:
    docker:
      - image: nibbleproject/nibble-ci-frontend
  builder:
    environment:
      IMAGE_NAME: nibbleproject/nibble
    docker:
      - image: nibbleproject/nibble-ci

jobs:
  test_backend:
    executor: builder
    steps:
      - checkout
      - run:
          name: Install requirements
          command: sudo pipenv install --system --dev
      - run:
          name: Run tests
          command: CI=true make test
      - run:
          name: Report Coverage
          command:
            coveralls
  test_frontend:
    executor: builder_frontend
    steps:
      - checkout
      - run:
          name: Install dependencies
          working_directory: ./frontend
          command: |
            yarn install
      - run:
          name: Run tests
          working_directory: ./frontend
          command: |
            yarn test:unit
            yarn test:e2e
  build_image:
    executor: builder
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build image
          command: docker build -t $IMAGE_NAME .
      - run:
          name: Archive image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  test_image:
    executor: builder
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Smoke test
          command: |
            set -x
            docker-compose -f .circle/docker-compose.yml up -d web postgres
            docker-compose -f .circle/docker-compose.yml run ci
  push_image:
    executor: builder
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Push image
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
  deploy_staging:
    executor: builder
    steps:
      - checkout
      - run:
          name: Configure Heroku
          command: |
            cat > ~/.netrc \<< EOF
            machine api.heroku.com
              login $HEROKU_LOGIN
              password $HEROKU_AUTH_TOKEN
            EOF
      - add_ssh_keys:
          fingerprints:
            - "61:66:4f:6c:6a:a6:1b:c3:18:18:04:2a:32:d0:b3:79"
      - run:
          name: Deploy to staging
          command: |
            heroku git:remote --app nibbleproject-staging --ssh-git
            git push heroku main
  deploy_production:
    executor: builder
    steps:
      - checkout
      - run:
          name: Configure Heroku
          command: |
            cat > ~/.netrc \<< EOF
            machine api.heroku.com
              login $HEROKU_LOGIN
              password $HEROKU_AUTH_TOKEN
            EOF
      - add_ssh_keys:
          fingerprints:
            - "61:66:4f:6c:6a:a6:1b:c3:18:18:04:2a:32:d0:b3:79"
      - run:
          name: Deploy to production
          command: |
            heroku git:remote --app nibbleproject-staging --ssh-git
            heroku pipelines:promote

workflows:
  version: 2
  main:
    jobs:
      - test_backend
      - test_frontend
      - build_image
      - test_image:
          requires:
            - build_image
      - push_image:
          requires:
            - build_image
            - test_image
          filters:
            branches:
              only: main
      - deploy_staging:
          requires:
            - test_frontend
            - test_backend
            - test_image
            - push_image
          filters:
            branches:
              only: main
      - hold:
          type: approval
          requires:
            - deploy_staging
          filters:
            branches:
              only: main
      - deploy_production:
          requires:
            - hold
          filters:
            branches:
              only: main
